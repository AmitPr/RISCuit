//! Autogenerated by riscv-inst-codegen
//! DO NOT EDIT

#[allow(unused_imports)]
use super::{FReg, Reg};
pub enum Rv32d {
    Fld(Fld),
    Fsd(Fsd),
    FmaddD(FmaddD),
    FmsubD(FmsubD),
    FnmsubD(FnmsubD),
    FnmaddD(FnmaddD),
    FaddD(FaddD),
    FsubD(FsubD),
    FmulD(FmulD),
    FdivD(FdivD),
    FsgnjD(FsgnjD),
    FsgnjnD(FsgnjnD),
    FsgnjxD(FsgnjxD),
    FminD(FminD),
    FmaxD(FmaxD),
    FcvtSD(FcvtSD),
    FcvtDS(FcvtDS),
    FsqrtD(FsqrtD),
    FleD(FleD),
    FltD(FltD),
    FeqD(FeqD),
    FcvtWD(FcvtWD),
    FcvtWuD(FcvtWuD),
    FcvtDW(FcvtDW),
    FcvtDWu(FcvtDWu),
    FclassD(FclassD),
}
pub struct Fld(pub u32);
impl Fld {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((self.0 >> 20) & 0b111111111111) << 20) as i32) >> 20
    }
}
impl std::fmt::Debug for Fld {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fld"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(rs1), &self.rs1())
            .field(stringify!(imm), &self.imm())
            .finish()
    }
}
impl std::fmt::Display for Fld {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fld")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.rs1())?;
        write!(f, " {:?}", self.imm())?;
        Ok(())
    }
}
pub struct Fsd(pub u32);
impl Fsd {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        (((((self.0 >> 20) & 0b111111100000) | ((self.0 >> 7) & 0b11111)) << 20)
            as i32)
            >> 20
    }
}
impl std::fmt::Debug for Fsd {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fsd"))
            .field("inst", &self.0)
            .field(stringify!(rs1), &self.rs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(imm), &self.imm())
            .finish()
    }
}
impl std::fmt::Display for Fsd {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fsd")?;
        write!(f, " {:?}", self.rs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.imm())?;
        Ok(())
    }
}
pub struct FmaddD(pub u32);
impl FmaddD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs3(&self) -> FReg {
        {
            let acc = (self.0 >> 27) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FmaddD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fmadd.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(frs3), &self.frs3())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FmaddD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fmadd.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.frs3())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FmsubD(pub u32);
impl FmsubD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs3(&self) -> FReg {
        {
            let acc = (self.0 >> 27) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FmsubD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fmsub.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(frs3), &self.frs3())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FmsubD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fmsub.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.frs3())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FnmsubD(pub u32);
impl FnmsubD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs3(&self) -> FReg {
        {
            let acc = (self.0 >> 27) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FnmsubD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fnmsub.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(frs3), &self.frs3())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FnmsubD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fnmsub.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.frs3())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FnmaddD(pub u32);
impl FnmaddD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs3(&self) -> FReg {
        {
            let acc = (self.0 >> 27) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FnmaddD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fnmadd.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(frs3), &self.frs3())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FnmaddD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fnmadd.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.frs3())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FaddD(pub u32);
impl FaddD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FaddD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fadd.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FaddD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fadd.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FsubD(pub u32);
impl FsubD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FsubD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fsub.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FsubD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fsub.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FmulD(pub u32);
impl FmulD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FmulD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fmul.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FmulD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fmul.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FdivD(pub u32);
impl FdivD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FdivD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fdiv.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FdivD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fdiv.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FsgnjD(pub u32);
impl FsgnjD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FsgnjD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fsgnj.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FsgnjD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fsgnj.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FsgnjnD(pub u32);
impl FsgnjnD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FsgnjnD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fsgnjn.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FsgnjnD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fsgnjn.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FsgnjxD(pub u32);
impl FsgnjxD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FsgnjxD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fsgnjx.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FsgnjxD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fsgnjx.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FminD(pub u32);
impl FminD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FminD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fmin.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FminD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fmin.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FmaxD(pub u32);
impl FmaxD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FmaxD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fmax.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FmaxD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fmax.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FcvtSD(pub u32);
impl FcvtSD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FcvtSD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fcvt.s.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FcvtSD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fcvt.s.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FcvtDS(pub u32);
impl FcvtDS {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FcvtDS {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fcvt.d.s"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FcvtDS {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fcvt.d.s")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FsqrtD(pub u32);
impl FsqrtD {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FsqrtD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fsqrt.d"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FsqrtD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fsqrt.d")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FleD(pub u32);
impl FleD {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FleD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fle.d"))
            .field("inst", &self.0)
            .field(stringify!(rd), &self.rd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FleD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fle.d")?;
        write!(f, " {:?}", self.rd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FltD(pub u32);
impl FltD {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FltD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("flt.d"))
            .field("inst", &self.0)
            .field(stringify!(rd), &self.rd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FltD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "flt.d")?;
        write!(f, " {:?}", self.rd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FeqD(pub u32);
impl FeqD {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FeqD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("feq.d"))
            .field("inst", &self.0)
            .field(stringify!(rd), &self.rd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(frs2), &self.frs2())
            .finish()
    }
}
impl std::fmt::Display for FeqD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "feq.d")?;
        write!(f, " {:?}", self.rd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.frs2())?;
        Ok(())
    }
}
pub struct FcvtWD(pub u32);
impl FcvtWD {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FcvtWD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fcvt.w.d"))
            .field("inst", &self.0)
            .field(stringify!(rd), &self.rd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FcvtWD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fcvt.w.d")?;
        write!(f, " {:?}", self.rd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FcvtWuD(pub u32);
impl FcvtWuD {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FcvtWuD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fcvt.wu.d"))
            .field("inst", &self.0)
            .field(stringify!(rd), &self.rd())
            .field(stringify!(frs1), &self.frs1())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FcvtWuD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fcvt.wu.d")?;
        write!(f, " {:?}", self.rd())?;
        write!(f, " {:?}", self.frs1())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FcvtDW(pub u32);
impl FcvtDW {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FcvtDW {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fcvt.d.w"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(rs1), &self.rs1())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FcvtDW {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fcvt.d.w")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.rs1())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FcvtDWu(pub u32);
impl FcvtDWu {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rm(&self) -> u32 {
        (self.0 >> 12) & 0b111
    }
}
impl std::fmt::Debug for FcvtDWu {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fcvt.d.wu"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(rs1), &self.rs1())
            .field(stringify!(rm), &self.rm())
            .finish()
    }
}
impl std::fmt::Display for FcvtDWu {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fcvt.d.wu")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.rs1())?;
        write!(f, " {:?}", self.rm())?;
        Ok(())
    }
}
pub struct FclassD(pub u32);
impl FclassD {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs1(&self) -> FReg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
}
impl std::fmt::Debug for FclassD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("fclass.d"))
            .field("inst", &self.0)
            .field(stringify!(rd), &self.rd())
            .field(stringify!(frs1), &self.frs1())
            .finish()
    }
}
impl std::fmt::Display for FclassD {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "fclass.d")?;
        write!(f, " {:?}", self.rd())?;
        write!(f, " {:?}", self.frs1())?;
        Ok(())
    }
}
impl std::fmt::Debug for Rv32d {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Rv32d::Fld(inst) => write!(f, "{inst:?}"),
            Rv32d::Fsd(inst) => write!(f, "{inst:?}"),
            Rv32d::FmaddD(inst) => write!(f, "{inst:?}"),
            Rv32d::FmsubD(inst) => write!(f, "{inst:?}"),
            Rv32d::FnmsubD(inst) => write!(f, "{inst:?}"),
            Rv32d::FnmaddD(inst) => write!(f, "{inst:?}"),
            Rv32d::FaddD(inst) => write!(f, "{inst:?}"),
            Rv32d::FsubD(inst) => write!(f, "{inst:?}"),
            Rv32d::FmulD(inst) => write!(f, "{inst:?}"),
            Rv32d::FdivD(inst) => write!(f, "{inst:?}"),
            Rv32d::FsgnjD(inst) => write!(f, "{inst:?}"),
            Rv32d::FsgnjnD(inst) => write!(f, "{inst:?}"),
            Rv32d::FsgnjxD(inst) => write!(f, "{inst:?}"),
            Rv32d::FminD(inst) => write!(f, "{inst:?}"),
            Rv32d::FmaxD(inst) => write!(f, "{inst:?}"),
            Rv32d::FcvtSD(inst) => write!(f, "{inst:?}"),
            Rv32d::FcvtDS(inst) => write!(f, "{inst:?}"),
            Rv32d::FsqrtD(inst) => write!(f, "{inst:?}"),
            Rv32d::FleD(inst) => write!(f, "{inst:?}"),
            Rv32d::FltD(inst) => write!(f, "{inst:?}"),
            Rv32d::FeqD(inst) => write!(f, "{inst:?}"),
            Rv32d::FcvtWD(inst) => write!(f, "{inst:?}"),
            Rv32d::FcvtWuD(inst) => write!(f, "{inst:?}"),
            Rv32d::FcvtDW(inst) => write!(f, "{inst:?}"),
            Rv32d::FcvtDWu(inst) => write!(f, "{inst:?}"),
            Rv32d::FclassD(inst) => write!(f, "{inst:?}"),
        }
    }
}
impl std::fmt::Display for Rv32d {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Rv32d::Fld(inst) => write!(f, "{inst}"),
            Rv32d::Fsd(inst) => write!(f, "{inst}"),
            Rv32d::FmaddD(inst) => write!(f, "{inst}"),
            Rv32d::FmsubD(inst) => write!(f, "{inst}"),
            Rv32d::FnmsubD(inst) => write!(f, "{inst}"),
            Rv32d::FnmaddD(inst) => write!(f, "{inst}"),
            Rv32d::FaddD(inst) => write!(f, "{inst}"),
            Rv32d::FsubD(inst) => write!(f, "{inst}"),
            Rv32d::FmulD(inst) => write!(f, "{inst}"),
            Rv32d::FdivD(inst) => write!(f, "{inst}"),
            Rv32d::FsgnjD(inst) => write!(f, "{inst}"),
            Rv32d::FsgnjnD(inst) => write!(f, "{inst}"),
            Rv32d::FsgnjxD(inst) => write!(f, "{inst}"),
            Rv32d::FminD(inst) => write!(f, "{inst}"),
            Rv32d::FmaxD(inst) => write!(f, "{inst}"),
            Rv32d::FcvtSD(inst) => write!(f, "{inst}"),
            Rv32d::FcvtDS(inst) => write!(f, "{inst}"),
            Rv32d::FsqrtD(inst) => write!(f, "{inst}"),
            Rv32d::FleD(inst) => write!(f, "{inst}"),
            Rv32d::FltD(inst) => write!(f, "{inst}"),
            Rv32d::FeqD(inst) => write!(f, "{inst}"),
            Rv32d::FcvtWD(inst) => write!(f, "{inst}"),
            Rv32d::FcvtWuD(inst) => write!(f, "{inst}"),
            Rv32d::FcvtDW(inst) => write!(f, "{inst}"),
            Rv32d::FcvtDWu(inst) => write!(f, "{inst}"),
            Rv32d::FclassD(inst) => write!(f, "{inst}"),
        }
    }
}
