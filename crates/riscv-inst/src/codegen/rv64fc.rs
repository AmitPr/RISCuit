//! Autogenerated by riscv-inst-codegen
//! DO NOT EDIT

#[allow(unused_imports)]
use super::{FReg, Reg};
pub enum Rv64fc {
    CFld(CFld),
    CFsd(CFsd),
    CFldsp(CFldsp),
    CFsdsp(CFsdsp),
}
pub struct CFld(pub u16);
impl CFld {
    #[inline]
    pub const fn frd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8 + 8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8 + 8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000) | (((self.0 as u32) << 1) & 0b11000000)
    }
}
impl std::fmt::Debug for CFld {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("c.fld"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(rs1), &self.rs1())
            .field(stringify!(imm), &self.imm())
            .finish()
    }
}
impl std::fmt::Display for CFld {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "c.fld")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.rs1())?;
        write!(f, " {:?}", self.imm())?;
        Ok(())
    }
}
pub struct CFsd(pub u16);
impl CFsd {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8 + 8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8 + 8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000) | (((self.0 as u32) << 1) & 0b11000000)
    }
}
impl std::fmt::Debug for CFsd {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("c.fsd"))
            .field("inst", &self.0)
            .field(stringify!(rs1), &self.rs1())
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(imm), &self.imm())
            .finish()
    }
}
impl std::fmt::Display for CFsd {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "c.fsd")?;
        write!(f, " {:?}", self.rs1())?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.imm())?;
        Ok(())
    }
}
pub struct CFldsp(pub u16);
impl CFldsp {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b100000)
            | ((((self.0 as u32) >> 2) & 0b11000) | (((self.0 as u32) << 4) & 0b111000000))
    }
}
impl std::fmt::Debug for CFldsp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("c.fldsp"))
            .field("inst", &self.0)
            .field(stringify!(frd), &self.frd())
            .field(stringify!(imm), &self.imm())
            .finish()
    }
}
impl std::fmt::Display for CFldsp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "c.fldsp")?;
        write!(f, " {:?}", self.frd())?;
        write!(f, " {:?}", self.imm())?;
        Ok(())
    }
}
pub struct CFsdsp(pub u16);
impl CFsdsp {
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000) | (((self.0 as u32) >> 1) & 0b111000000)
    }
}
impl std::fmt::Debug for CFsdsp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct(stringify!("c.fsdsp"))
            .field("inst", &self.0)
            .field(stringify!(frs2), &self.frs2())
            .field(stringify!(imm), &self.imm())
            .finish()
    }
}
impl std::fmt::Display for CFsdsp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "c.fsdsp")?;
        write!(f, " {:?}", self.frs2())?;
        write!(f, " {:?}", self.imm())?;
        Ok(())
    }
}
impl std::fmt::Debug for Rv64fc {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Rv64fc::CFld(inst) => write!(f, "{inst:?}"),
            Rv64fc::CFsd(inst) => write!(f, "{inst:?}"),
            Rv64fc::CFldsp(inst) => write!(f, "{inst:?}"),
            Rv64fc::CFsdsp(inst) => write!(f, "{inst:?}"),
        }
    }
}
impl std::fmt::Display for Rv64fc {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Rv64fc::CFld(inst) => write!(f, "{inst}"),
            Rv64fc::CFsd(inst) => write!(f, "{inst}"),
            Rv64fc::CFldsp(inst) => write!(f, "{inst}"),
            Rv64fc::CFsdsp(inst) => write!(f, "{inst}"),
        }
    }
}
