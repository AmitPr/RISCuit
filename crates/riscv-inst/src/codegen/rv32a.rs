//! Autogenerated by riscv-inst-codegen
//! DO NOT EDIT

#[allow(unused_imports)]
use super::{FReg, Reg};
pub enum Rv32a {
    LrW(LrW),
    ScW(ScW),
    AmoswapW(AmoswapW),
    AmoaddW(AmoaddW),
    AmoxorW(AmoxorW),
    AmoorW(AmoorW),
    AmoandW(AmoandW),
    AmominW(AmominW),
    AmomaxW(AmomaxW),
    AmominuW(AmominuW),
    AmomaxuW(AmomaxuW),
}
pub struct LrW(pub u32);
impl LrW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct ScW(pub u32);
impl ScW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmoswapW(pub u32);
impl AmoswapW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmoaddW(pub u32);
impl AmoaddW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmoxorW(pub u32);
impl AmoxorW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmoorW(pub u32);
impl AmoorW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmoandW(pub u32);
impl AmoandW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmominW(pub u32);
impl AmominW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmomaxW(pub u32);
impl AmomaxW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmominuW(pub u32);
impl AmominuW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
pub struct AmomaxuW(pub u32);
impl AmomaxuW {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn aq(&self) -> u32 {
        (self.0 >> 26) & 0b1
    }
    #[inline]
    pub const fn rl(&self) -> u32 {
        (self.0 >> 25) & 0b1
    }
}
