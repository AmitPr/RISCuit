//! Autogenerated by riscv-inst-codegen
//! DO NOT EDIT

#[allow(unused_imports)]
use super::{FReg, Reg};
pub enum Rv32c {
    CAddi4spn(CAddi4spn),
    CFld(CFld),
    CLw(CLw),
    CFlw(CFlw),
    CFsd(CFsd),
    CSw(CSw),
    CFsw(CFsw),
    CNop(CNop),
    CAddi(CAddi),
    CJal(CJal),
    CLi(CLi),
    CAddi16sp(CAddi16sp),
    CLui(CLui),
    CSrli(CSrli),
    CSrai(CSrai),
    CAndi(CAndi),
    CSub(CSub),
    CXor(CXor),
    COr(COr),
    CAnd(CAnd),
    CSubw(CSubw),
    CAddw(CAddw),
    CJ(CJ),
    CBeqz(CBeqz),
    CBnez(CBnez),
    CSlli(CSlli),
    CFldsp(CFldsp),
    CLwsp(CLwsp),
    CFlwsp(CFlwsp),
    CJr(CJr),
    CMv(CMv),
    CEbreak(CEbreak),
    CJalr(CJalr),
    CAdd(CAdd),
    CFsdsp(CFsdsp),
    CSwsp(CSwsp),
    CFswsp(CFswsp),
}
pub struct CAddi4spn(pub u16);
impl CAddi4spn {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b110000)
            | (((self.0 as u32) >> 1) & 0b1111000000)
            | (((self.0 as u32) >> 4) & 0b100)
            | (((self.0 as u32) >> 2) & 0b1000)
    }
}
pub struct CFld(pub u16);
impl CFld {
    #[inline]
    pub const fn frd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000) | (((self.0 as u32) << 1) & 0b11000000)
    }
}
pub struct CLw(pub u16);
impl CLw {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000)
            | ((((self.0 as u32) >> 4) & 0b100) | (((self.0 as u32) << 1) & 0b1000000))
    }
}
pub struct CFlw(pub u16);
impl CFlw {
    #[inline]
    pub const fn frd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000)
            | ((((self.0 as u32) >> 4) & 0b100) | (((self.0 as u32) << 1) & 0b1000000))
    }
}
pub struct CFsd(pub u16);
impl CFsd {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000) | (((self.0 as u32) << 1) & 0b11000000)
    }
}
pub struct CSw(pub u16);
impl CSw {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000)
            | ((((self.0 as u32) >> 4) & 0b100) | (((self.0 as u32) << 1) & 0b1000000))
    }
}
pub struct CFsw(pub u16);
impl CFsw {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn frs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000)
            | ((((self.0 as u32) >> 4) & 0b100) | (((self.0 as u32) << 1) & 0b1000000))
    }
}
pub struct CNop(pub u16);
impl CNop {}
pub struct CAddi(pub u16);
impl CAddi {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((((self.0 as u32) >> 7) & 0b100000) | (((self.0 as u32) >> 2) & 0b11111)) << 27) as i32)
            >> 27
    }
}
pub struct CJal(pub u16);
impl CJal {
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((((self.0 as u32) >> 1) & 0b100000000000)
            | (((self.0 as u32) >> 7) & 0b10000)
            | (((self.0 as u32) >> 1) & 0b1100000000)
            | (((self.0 as u32) << 2) & 0b10000000000)
            | (((self.0 as u32) >> 1) & 0b1000000)
            | (((self.0 as u32) << 1) & 0b10000000)
            | (((self.0 as u32) >> 2) & 0b1110)
            | (((self.0 as u32) << 3) & 0b100000))
            << 21) as i32)
            >> 21
    }
}
pub struct CLi(pub u16);
impl CLi {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((((self.0 as u32) >> 7) & 0b100000) | (((self.0 as u32) >> 2) & 0b11111)) << 27) as i32)
            >> 27
    }
}
pub struct CAddi16sp(pub u16);
impl CAddi16sp {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((((self.0 as u32) >> 3) & 0b1000000000)
            | ((((self.0 as u32) >> 2) & 0b10000)
                | (((self.0 as u32) << 1) & 0b1000000)
                | (((self.0 as u32) << 4) & 0b110000000)
                | (((self.0 as u32) << 3) & 0b100000)))
            << 23) as i32)
            >> 23
    }
}
pub struct CLui(pub u16);
impl CLui {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((((self.0 as u32) << 5) & 0b100000000000000000)
            | (((self.0 as u32) << 10) & 0b11111000000000000))
            << 15) as i32)
            >> 15
    }
}
pub struct CSrli(pub u16);
impl CSrli {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn shamt(&self) -> u32 {
        ((self.0 as u32) >> 2) & 0b11111
    }
}
pub struct CSrai(pub u16);
impl CSrai {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn shamt(&self) -> u32 {
        ((self.0 as u32) >> 2) & 0b11111
    }
}
pub struct CAndi(pub u16);
impl CAndi {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((((self.0 as u32) >> 7) & 0b100000) | (((self.0 as u32) >> 2) & 0b11111)) << 27) as i32)
            >> 27
    }
}
pub struct CSub(pub u16);
impl CSub {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CXor(pub u16);
impl CXor {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct COr(pub u16);
impl COr {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CAnd(pub u16);
impl CAnd {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CSubw(pub u16);
impl CSubw {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CAddw(pub u16);
impl CAddw {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CJ(pub u16);
impl CJ {
    #[inline]
    pub const fn imm(&self) -> i32 {
        ((((((self.0 as u32) >> 1) & 0b100000000000)
            | (((self.0 as u32) >> 7) & 0b10000)
            | (((self.0 as u32) >> 1) & 0b1100000000)
            | (((self.0 as u32) << 2) & 0b10000000000)
            | (((self.0 as u32) >> 1) & 0b1000000)
            | (((self.0 as u32) << 1) & 0b10000000)
            | (((self.0 as u32) >> 2) & 0b1110)
            | (((self.0 as u32) << 3) & 0b100000))
            << 21) as i32)
            >> 21
    }
}
pub struct CBeqz(pub u16);
impl CBeqz {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        (((((((self.0 as u32) >> 4) & 0b100000000) | (((self.0 as u32) >> 7) & 0b11000))
            | ((((self.0 as u32) << 1) & 0b11000000)
                | (((self.0 as u32) >> 2) & 0b110)
                | (((self.0 as u32) << 3) & 0b100000)))
            << 24) as i32)
            >> 24
    }
}
pub struct CBnez(pub u16);
impl CBnez {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> i32 {
        (((((((self.0 as u32) >> 4) & 0b100000000) | (((self.0 as u32) >> 7) & 0b11000))
            | ((((self.0 as u32) << 1) & 0b11000000)
                | (((self.0 as u32) >> 2) & 0b110)
                | (((self.0 as u32) << 3) & 0b100000)))
            << 24) as i32)
            >> 24
    }
}
pub struct CSlli(pub u16);
impl CSlli {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn shamt(&self) -> u32 {
        ((self.0 as u32) >> 2) & 0b11111
    }
}
pub struct CFldsp(pub u16);
impl CFldsp {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b100000)
            | ((((self.0 as u32) >> 2) & 0b11000) | (((self.0 as u32) << 4) & 0b111000000))
    }
}
pub struct CLwsp(pub u16);
impl CLwsp {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b100000)
            | ((((self.0 as u32) >> 2) & 0b11100) | (((self.0 as u32) << 4) & 0b11000000))
    }
}
pub struct CFlwsp(pub u16);
impl CFlwsp {
    #[inline]
    pub const fn frd(&self) -> FReg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b100000)
            | ((((self.0 as u32) >> 2) & 0b11100) | (((self.0 as u32) << 4) & 0b11000000))
    }
}
pub struct CJr(pub u16);
impl CJr {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 12) & 0b1;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CMv(pub u16);
impl CMv {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CEbreak(pub u16);
impl CEbreak {}
pub struct CJalr(pub u16);
impl CJalr {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 12) & 0b1;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CAdd(pub u16);
impl CAdd {
    #[inline]
    pub const fn rs1rd(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct CFsdsp(pub u16);
impl CFsdsp {
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111000) | (((self.0 as u32) >> 1) & 0b111000000)
    }
}
pub struct CSwsp(pub u16);
impl CSwsp {
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111100) | (((self.0 as u32) >> 1) & 0b11000000)
    }
}
pub struct CFswsp(pub u16);
impl CFswsp {
    #[inline]
    pub const fn frs2(&self) -> FReg {
        {
            let acc = ((self.0 as u32) >> 2) & 0b11111;
            unsafe { FReg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (((self.0 as u32) >> 7) & 0b111100) | (((self.0 as u32) >> 1) & 0b11000000)
    }
}
