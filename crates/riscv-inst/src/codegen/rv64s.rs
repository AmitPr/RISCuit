//! Autogenerated by riscv-inst-codegen
//! DO NOT EDIT

#[allow(unused_imports)]
use super::{FReg, Reg};
pub enum Rv64s {
    Ecall(Ecall),
    Ebreak(Ebreak),
    Uret(Uret),
    Sret(Sret),
    Hret(Hret),
    Mret(Mret),
    Dret(Dret),
    SfenceVm(SfenceVm),
    SfenceVma(SfenceVma),
    Wfi(Wfi),
    Csrrw(Csrrw),
    Csrrs(Csrrs),
    Csrrc(Csrrc),
    Csrrwi(Csrrwi),
    Csrrsi(Csrrsi),
    Csrrci(Csrrci),
}
pub struct Ecall(pub u32);
impl Ecall {}
pub struct Ebreak(pub u32);
impl Ebreak {}
pub struct Uret(pub u32);
impl Uret {}
pub struct Sret(pub u32);
impl Sret {}
pub struct Hret(pub u32);
impl Hret {}
pub struct Mret(pub u32);
impl Mret {}
pub struct Dret(pub u32);
impl Dret {}
pub struct SfenceVm(pub u32);
impl SfenceVm {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct SfenceVma(pub u32);
impl SfenceVma {
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs2(&self) -> Reg {
        {
            let acc = (self.0 >> 20) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
}
pub struct Wfi(pub u32);
impl Wfi {}
pub struct Csrrw(pub u32);
impl Csrrw {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn csr12(&self) -> u32 {
        (self.0 >> 20) & 0b111111111111
    }
}
pub struct Csrrs(pub u32);
impl Csrrs {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn csr12(&self) -> u32 {
        (self.0 >> 20) & 0b111111111111
    }
}
pub struct Csrrc(pub u32);
impl Csrrc {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn rs1(&self) -> Reg {
        {
            let acc = (self.0 >> 15) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn csr12(&self) -> u32 {
        (self.0 >> 20) & 0b111111111111
    }
}
pub struct Csrrwi(pub u32);
impl Csrrwi {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (self.0 >> 15) & 0b11111
    }
    #[inline]
    pub const fn csr12(&self) -> u32 {
        (self.0 >> 20) & 0b111111111111
    }
}
pub struct Csrrsi(pub u32);
impl Csrrsi {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (self.0 >> 15) & 0b11111
    }
    #[inline]
    pub const fn csr12(&self) -> u32 {
        (self.0 >> 20) & 0b111111111111
    }
}
pub struct Csrrci(pub u32);
impl Csrrci {
    #[inline]
    pub const fn rd(&self) -> Reg {
        {
            let acc = (self.0 >> 7) & 0b11111;
            unsafe { Reg::from_u5(acc as u8) }
        }
    }
    #[inline]
    pub const fn imm(&self) -> u32 {
        (self.0 >> 15) & 0b11111
    }
    #[inline]
    pub const fn csr12(&self) -> u32 {
        (self.0 >> 20) & 0b111111111111
    }
}
